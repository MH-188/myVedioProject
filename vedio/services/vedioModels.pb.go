// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: vedioModels.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//数据库结构
type VedioModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UId           int64  `protobuf:"varint,1,opt,name=UId,proto3" json:"UId,omitempty"`
	CommentCount  int64  `protobuf:"varint,2,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	CoverURL      string `protobuf:"bytes,3,opt,name=CoverURL,proto3" json:"CoverURL,omitempty"`
	FavoriteCount int64  `protobuf:"varint,4,opt,name=FavoriteCount,proto3" json:"FavoriteCount,omitempty"`
	VID           int64  `protobuf:"varint,5,opt,name=VID,proto3" json:"VID,omitempty"`
	IsFavorite    bool   `protobuf:"varint,6,opt,name=IsFavorite,proto3" json:"IsFavorite,omitempty"`
	PlayURL       string `protobuf:"bytes,7,opt,name=PlayURL,proto3" json:"PlayURL,omitempty"`
	Title         string `protobuf:"bytes,8,opt,name=Title,proto3" json:"Title,omitempty"`
	UploadTime    int64  `protobuf:"varint,9,opt,name=UploadTime,proto3" json:"UploadTime,omitempty"`
}

func (x *VedioModel) Reset() {
	*x = VedioModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vedioModels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VedioModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VedioModel) ProtoMessage() {}

func (x *VedioModel) ProtoReflect() protoreflect.Message {
	mi := &file_vedioModels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VedioModel.ProtoReflect.Descriptor instead.
func (*VedioModel) Descriptor() ([]byte, []int) {
	return file_vedioModels_proto_rawDescGZIP(), []int{0}
}

func (x *VedioModel) GetUId() int64 {
	if x != nil {
		return x.UId
	}
	return 0
}

func (x *VedioModel) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *VedioModel) GetCoverURL() string {
	if x != nil {
		return x.CoverURL
	}
	return ""
}

func (x *VedioModel) GetFavoriteCount() int64 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *VedioModel) GetVID() int64 {
	if x != nil {
		return x.VID
	}
	return 0
}

func (x *VedioModel) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *VedioModel) GetPlayURL() string {
	if x != nil {
		return x.PlayURL
	}
	return ""
}

func (x *VedioModel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VedioModel) GetUploadTime() int64 {
	if x != nil {
		return x.UploadTime
	}
	return 0
}

// Video 嵌入Resp中的数据
type Vedio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author        *User `protobuf:"bytes,1,opt,name=Author,proto3" json:"Author,omitempty"`
	CommentCount  int64 `protobuf:"varint,2,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	CoverURL      string `protobuf:"bytes,3,opt,name=CoverURL,proto3" json:"CoverURL,omitempty"`
	FavoriteCount int64  `protobuf:"varint,4,opt,name=FavoriteCount,proto3" json:"FavoriteCount,omitempty"`
	VID           int64  `protobuf:"varint,5,opt,name=VID,proto3" json:"VID,omitempty"`
	IsFavorite    bool   `protobuf:"varint,6,opt,name=IsFavorite,proto3" json:"IsFavorite,omitempty"`
	PlayURL       string `protobuf:"bytes,7,opt,name=PlayURL,proto3" json:"PlayURL,omitempty"`
	Title         string `protobuf:"bytes,8,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (x *Vedio) Reset() {
	*x = Vedio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vedioModels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vedio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vedio) ProtoMessage() {}

func (x *Vedio) ProtoReflect() protoreflect.Message {
	mi := &file_vedioModels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vedio.ProtoReflect.Descriptor instead.
func (*Vedio) Descriptor() ([]byte, []int) {
	return file_vedioModels_proto_rawDescGZIP(), []int{1}
}

func (x *Vedio) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Vedio) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Vedio) GetCoverURL() string {
	if x != nil {
		return x.CoverURL
	}
	return ""
}

func (x *Vedio) GetFavoriteCount() int64 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *Vedio) GetVID() int64 {
	if x != nil {
		return x.VID
	}
	return 0
}

func (x *Vedio) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *Vedio) GetPlayURL() string {
	if x != nil {
		return x.PlayURL
	}
	return ""
}

func (x *Vedio) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// User
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowCount   int64  `protobuf:"varint,1,opt,name=FollowCount,proto3" json:"FollowCount,omitempty"`     // 关注总数
	FollowerCount int64  `protobuf:"varint,2,opt,name=FollowerCount,proto3" json:"FollowerCount,omitempty"` // 粉丝总数
	UID           int64  `protobuf:"varint,3,opt,name=UID,proto3" json:"UID,omitempty"`                     // 用户id
	IsFollow      bool   `protobuf:"varint,4,opt,name=IsFollow,proto3" json:"IsFollow,omitempty"`           // true-已关注，false-未关注
	Name          string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`                    // 用户名称
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vedioModels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_vedioModels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_vedioModels_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetFollowCount() int64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *User) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *User) GetUID() int64 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *User) GetIsFollow() bool {
	if x != nil {
		return x.IsFollow
	}
	return false
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_vedioModels_proto protoreflect.FileDescriptor

var file_vedioModels_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x65, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x86, 0x02,
	0x0a, 0x0a, 0x56, 0x65, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x55, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x24,
	0x0a, 0x0d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x56, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52,
	0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x05, 0x56, 0x65, 0x64, 0x69, 0x6f,
	0x12, 0x26, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x56, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x90, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vedioModels_proto_rawDescOnce sync.Once
	file_vedioModels_proto_rawDescData = file_vedioModels_proto_rawDesc
)

func file_vedioModels_proto_rawDescGZIP() []byte {
	file_vedioModels_proto_rawDescOnce.Do(func() {
		file_vedioModels_proto_rawDescData = protoimpl.X.CompressGZIP(file_vedioModels_proto_rawDescData)
	})
	return file_vedioModels_proto_rawDescData
}

var file_vedioModels_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_vedioModels_proto_goTypes = []interface{}{
	(*VedioModel)(nil), // 0: services.VedioModel
	(*Vedio)(nil),      // 1: services.Vedio
	(*User)(nil),       // 2: services.User
}
var file_vedioModels_proto_depIdxs = []int32{
	2, // 0: services.Vedio.Author:type_name -> services.User
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_vedioModels_proto_init() }
func file_vedioModels_proto_init() {
	if File_vedioModels_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vedioModels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VedioModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vedioModels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vedio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vedioModels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vedioModels_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vedioModels_proto_goTypes,
		DependencyIndexes: file_vedioModels_proto_depIdxs,
		MessageInfos:      file_vedioModels_proto_msgTypes,
	}.Build()
	File_vedioModels_proto = out.File
	file_vedioModels_proto_rawDesc = nil
	file_vedioModels_proto_goTypes = nil
	file_vedioModels_proto_depIdxs = nil
}
