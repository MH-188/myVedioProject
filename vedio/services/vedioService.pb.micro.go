// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vedioService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VedioService service

func NewVedioServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VedioService service

type VedioService interface {
	VedioStream(ctx context.Context, in *VedioStreamReq, opts ...client.CallOption) (*VedioStreamResp, error)
	PublishVedio(ctx context.Context, in *PublishReq, opts ...client.CallOption) (*PublishResp, error)
	PublishList(ctx context.Context, in *PublishListReq, opts ...client.CallOption) (*PublishListResp, error)
	FavoriteCountChange(ctx context.Context, in *FavoriteCountChangeReq, opts ...client.CallOption) (*FavoriteChangeResp, error)
	CommentCountChange(ctx context.Context, in *FavoriteCountChangeReq, opts ...client.CallOption) (*FavoriteChangeResp, error)
}

type vedioService struct {
	c    client.Client
	name string
}

func NewVedioService(name string, c client.Client) VedioService {
	return &vedioService{
		c:    c,
		name: name,
	}
}

func (c *vedioService) VedioStream(ctx context.Context, in *VedioStreamReq, opts ...client.CallOption) (*VedioStreamResp, error) {
	req := c.c.NewRequest(c.name, "VedioService.VedioStream", in)
	out := new(VedioStreamResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vedioService) PublishVedio(ctx context.Context, in *PublishReq, opts ...client.CallOption) (*PublishResp, error) {
	req := c.c.NewRequest(c.name, "VedioService.PublishVedio", in)
	out := new(PublishResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vedioService) PublishList(ctx context.Context, in *PublishListReq, opts ...client.CallOption) (*PublishListResp, error) {
	req := c.c.NewRequest(c.name, "VedioService.PublishList", in)
	out := new(PublishListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vedioService) FavoriteCountChange(ctx context.Context, in *FavoriteCountChangeReq, opts ...client.CallOption) (*FavoriteChangeResp, error) {
	req := c.c.NewRequest(c.name, "VedioService.FavoriteCountChange", in)
	out := new(FavoriteChangeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vedioService) CommentCountChange(ctx context.Context, in *FavoriteCountChangeReq, opts ...client.CallOption) (*FavoriteChangeResp, error) {
	req := c.c.NewRequest(c.name, "VedioService.CommentCountChange", in)
	out := new(FavoriteChangeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VedioService service

type VedioServiceHandler interface {
	VedioStream(context.Context, *VedioStreamReq, *VedioStreamResp) error
	PublishVedio(context.Context, *PublishReq, *PublishResp) error
	PublishList(context.Context, *PublishListReq, *PublishListResp) error
	FavoriteCountChange(context.Context, *FavoriteCountChangeReq, *FavoriteChangeResp) error
	CommentCountChange(context.Context, *FavoriteCountChangeReq, *FavoriteChangeResp) error
}

func RegisterVedioServiceHandler(s server.Server, hdlr VedioServiceHandler, opts ...server.HandlerOption) error {
	type vedioService interface {
		VedioStream(ctx context.Context, in *VedioStreamReq, out *VedioStreamResp) error
		PublishVedio(ctx context.Context, in *PublishReq, out *PublishResp) error
		PublishList(ctx context.Context, in *PublishListReq, out *PublishListResp) error
		FavoriteCountChange(ctx context.Context, in *FavoriteCountChangeReq, out *FavoriteChangeResp) error
		CommentCountChange(ctx context.Context, in *FavoriteCountChangeReq, out *FavoriteChangeResp) error
	}
	type VedioService struct {
		vedioService
	}
	h := &vedioServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VedioService{h}, opts...))
}

type vedioServiceHandler struct {
	VedioServiceHandler
}

func (h *vedioServiceHandler) VedioStream(ctx context.Context, in *VedioStreamReq, out *VedioStreamResp) error {
	return h.VedioServiceHandler.VedioStream(ctx, in, out)
}

func (h *vedioServiceHandler) PublishVedio(ctx context.Context, in *PublishReq, out *PublishResp) error {
	return h.VedioServiceHandler.PublishVedio(ctx, in, out)
}

func (h *vedioServiceHandler) PublishList(ctx context.Context, in *PublishListReq, out *PublishListResp) error {
	return h.VedioServiceHandler.PublishList(ctx, in, out)
}

func (h *vedioServiceHandler) FavoriteCountChange(ctx context.Context, in *FavoriteCountChangeReq, out *FavoriteChangeResp) error {
	return h.VedioServiceHandler.FavoriteCountChange(ctx, in, out)
}

func (h *vedioServiceHandler) CommentCountChange(ctx context.Context, in *FavoriteCountChangeReq, out *FavoriteChangeResp) error {
	return h.VedioServiceHandler.CommentCountChange(ctx, in, out)
}
